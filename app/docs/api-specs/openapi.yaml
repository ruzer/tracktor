openapi: 3.1.0
info:
  title: Tracktor API
  description: |
    Tracktor is a comprehensive vehicle management application that helps users track fuel consumption, maintenance logs, insurance records, and pollution certificates for their vehicles. The API provides endpoints for managing all aspects of vehicle data with PIN-based authentication.

    ## Authentication

    All API endpoints (except PIN management) require authentication using a 6-digit PIN sent in the `X-User-PIN` header.

    ## Rate Limiting

    The PIN verification endpoint has rate limiting (5 attempts per 5 minutes) to prevent brute-force attacks.
  version: 1.0.0
  contact:
    name: Tracktor API Support
    url: https://github.com/your-repo/tracktor
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3000/api
    description: Development server (default for local testing)
    variables:
      port:
        default: "3000"
        description: Port number for local development
  - url: https://api-staging.tracktor.example.com/api
    description: Staging server (for testing before production)
  - url: https://api.tracktor.example.com/api
    description: Production server (live environment)
  - url: http://localhost:{port}/api
    description: Custom local server
    variables:
      port:
        default: "3000"
        enum:
          - "3000"
          - "8000"
          - "8080"
        description: Port number for custom local development

security:
  - PinAuth: []

components:
  securitySchemes:
    PinAuth:
      type: apiKey
      in: header
      name: X-User-PIN
      description: |
        6-digit PIN for authentication.

        **Setup Process:**
        1. First, set a PIN using `POST /api/pin` (no authentication required)
        2. Use the PIN in the `X-User-PIN` header for all subsequent requests
        3. PIN verification has rate limiting (5 attempts per 5 minutes)

        **Example:** `X-User-PIN: 123456`

  schemas:
    # Error Response Schemas
    ErrorResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: Error message describing what went wrong
          example: "Vehicle ID is required."
        error:
          type: string
          description: Additional error details (optional)
          example: "Validation failed"

    ValidationErrorResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: Validation error message
          example: "Make, Model, Year, and License Plate are required."

    # Success Response Schemas
    SuccessResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: Success message
          example: "Operation completed successfully"

    # Vehicle Schemas
    Vehicle:
      type: object
      required:
        - id
        - make
        - model
        - year
        - licensePlate
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the vehicle
          example: "123e4567-e89b-12d3-a456-426614174000"
        make:
          type: string
          minLength: 3
          maxLength: 50
          description: Vehicle manufacturer
          example: "Toyota"
        model:
          type: string
          minLength: 3
          maxLength: 50
          description: Vehicle model
          example: "Camry"
        year:
          type: integer
          minimum: 1886
          maximum: 2024
          description: Vehicle manufacturing year
          example: 2020
        licensePlate:
          type: string
          pattern: "^[A-Z0-9- ]{2,25}$"
          description: Vehicle license plate number
          example: "ABC-1234"
        vin:
          type: string
          pattern: "^[A-HJ-NPR-Z0-9]{3,}$"
          description: Vehicle Identification Number (optional)
          example: "1HGBH41JXMN109186"
        color:
          type: string
          pattern: "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$"
          description: Vehicle color in hex format (optional)
          example: "#FF0000"
        odometer:
          type: integer
          minimum: 0
          description: Initial odometer reading (optional)
          example: 50000
        createdAt:
          type: string
          format: date-time
          description: Vehicle creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Vehicle last update timestamp

    VehicleInput:
      type: object
      required:
        - make
        - model
        - year
        - licensePlate
      properties:
        make:
          type: string
          minLength: 3
          maxLength: 50
          description: Vehicle manufacturer
          example: "Toyota"
        model:
          type: string
          minLength: 3
          maxLength: 50
          description: Vehicle model
          example: "Camry"
        year:
          type: integer
          minimum: 1886
          maximum: 2024
          description: Vehicle manufacturing year
          example: 2020
        licensePlate:
          type: string
          pattern: "^[A-Z0-9- ]{2,25}$"
          description: Vehicle license plate number
          example: "ABC-1234"
        vin:
          type: string
          pattern: "^[A-HJ-NPR-Z0-9]{3,}$"
          description: Vehicle Identification Number (optional)
          example: "1HGBH41JXMN109186"
        color:
          type: string
          pattern: "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$"
          description: Vehicle color in hex format (optional)
          example: "#FF0000"
        odometer:
          type: integer
          minimum: 0
          description: Initial odometer reading (optional)
          example: 50000

    # Fuel Log Schemas
    FuelLog:
      type: object
      required:
        - id
        - vehicleId
        - date
        - odometer
        - fuelAmount
        - cost
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the fuel log entry
          example: "123e4567-e89b-12d3-a456-426614174001"
        vehicleId:
          type: string
          format: uuid
          description: ID of the associated vehicle
          example: "123e4567-e89b-12d3-a456-426614174000"
        date:
          type: string
          format: date
          description: Date of fuel purchase
          example: "2024-01-15"
        odometer:
          type: integer
          minimum: 0
          description: Odometer reading at time of fuel purchase
          example: 52000
        fuelAmount:
          type: number
          format: float
          minimum: 0
          description: Amount of fuel purchased in liters
          example: 45.5
        cost:
          type: number
          format: float
          minimum: 0
          description: Cost of fuel purchase
          example: 75.25
        notes:
          type: string
          maxLength: 500
          description: Optional notes about the fuel purchase
          example: "Full tank at highway gas station"
        createdAt:
          type: string
          format: date-time
          description: Fuel log creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Fuel log last update timestamp

    FuelLogInput:
      type: object
      required:
        - date
        - odometer
        - fuelAmount
        - cost
      properties:
        date:
          type: string
          format: date
          description: Date of fuel purchase
          example: "2024-01-15"
        odometer:
          type: integer
          minimum: 0
          description: Odometer reading at time of fuel purchase
          example: 52000
        fuelAmount:
          type: number
          format: float
          minimum: 0
          description: Amount of fuel purchased in liters
          example: 45.5
        cost:
          type: number
          format: float
          minimum: 0
          description: Cost of fuel purchase
          example: 75.25
        notes:
          type: string
          maxLength: 500
          description: Optional notes about the fuel purchase
          example: "Full tank at highway gas station"

    # Maintenance Log Schemas
    MaintenanceLog:
      type: object
      required:
        - id
        - vehicleId
        - date
        - odometer
        - serviceCenter
        - cost
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the maintenance log entry
          example: "123e4567-e89b-12d3-a456-426614174002"
        vehicleId:
          type: string
          format: uuid
          description: ID of the associated vehicle
          example: "123e4567-e89b-12d3-a456-426614174000"
        date:
          type: string
          format: date
          description: Date of maintenance service
          example: "2024-01-20"
        odometer:
          type: integer
          minimum: 0
          description: Odometer reading at time of service
          example: 52500
        serviceCenter:
          type: string
          minLength: 3
          maxLength: 50
          description: Name of the service center
          example: "AutoCare Plus"
        cost:
          type: number
          format: float
          minimum: 0
          description: Cost of maintenance service
          example: 150.00
        notes:
          type: string
          maxLength: 500
          description: Optional notes about the maintenance service
          example: "Oil change and tire rotation"
        createdAt:
          type: string
          format: date-time
          description: Maintenance log creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Maintenance log last update timestamp

    MaintenanceLogInput:
      type: object
      required:
        - date
        - odometer
        - serviceCenter
        - cost
      properties:
        date:
          type: string
          format: date
          description: Date of maintenance service
          example: "2024-01-20"
        odometer:
          type: integer
          minimum: 0
          description: Odometer reading at time of service
          example: 52500
        serviceCenter:
          type: string
          minLength: 3
          maxLength: 50
          description: Name of the service center
          example: "AutoCare Plus"
        cost:
          type: number
          format: float
          minimum: 0
          description: Cost of maintenance service
          example: 150.00
        notes:
          type: string
          maxLength: 500
          description: Optional notes about the maintenance service
          example: "Oil change and tire rotation"

    # Insurance Schemas
    Insurance:
      type: object
      required:
        - id
        - vehicleId
        - provider
        - policyNumber
        - startDate
        - endDate
        - cost
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the insurance record
          example: "123e4567-e89b-12d3-a456-426614174003"
        vehicleId:
          type: string
          format: uuid
          description: ID of the associated vehicle
          example: "123e4567-e89b-12d3-a456-426614174000"
        provider:
          type: string
          minLength: 3
          maxLength: 50
          description: Insurance provider name
          example: "State Farm"
        policyNumber:
          type: string
          minLength: 3
          maxLength: 50
          pattern: "^[0-9A-Za-z- ]*$"
          description: Insurance policy number
          example: "POL-123456789"
        startDate:
          type: string
          format: date
          description: Insurance policy start date
          example: "2024-01-01"
        endDate:
          type: string
          format: date
          description: Insurance policy end date
          example: "2024-12-31"
        cost:
          type: number
          format: float
          minimum: 0
          description: Insurance policy cost
          example: 1200.00
        notes:
          type: string
          maxLength: 500
          description: Optional notes about the insurance policy
          example: "Comprehensive coverage with $500 deductible"
        createdAt:
          type: string
          format: date-time
          description: Insurance record creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Insurance record last update timestamp

    InsuranceInput:
      type: object
      required:
        - provider
        - policyNumber
        - startDate
        - endDate
        - cost
      properties:
        provider:
          type: string
          minLength: 3
          maxLength: 50
          description: Insurance provider name
          example: "State Farm"
        policyNumber:
          type: string
          minLength: 3
          maxLength: 50
          pattern: "^[0-9A-Za-z- ]*$"
          description: Insurance policy number
          example: "POL-123456789"
        startDate:
          type: string
          format: date
          description: Insurance policy start date
          example: "2024-01-01"
        endDate:
          type: string
          format: date
          description: Insurance policy end date
          example: "2024-12-31"
        cost:
          type: number
          format: float
          minimum: 0
          description: Insurance policy cost
          example: 1200.00
        notes:
          type: string
          maxLength: 500
          description: Optional notes about the insurance policy
          example: "Comprehensive coverage with $500 deductible"

    # Pollution Certificate (PUCC) Schemas
    PollutionCertificate:
      type: object
      required:
        - id
        - vehicleId
        - certificateNumber
        - issueDate
        - expiryDate
        - testingCenter
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the pollution certificate
          example: "123e4567-e89b-12d3-a456-426614174004"
        vehicleId:
          type: string
          format: uuid
          description: ID of the associated vehicle
          example: "123e4567-e89b-12d3-a456-426614174000"
        certificateNumber:
          type: string
          minLength: 3
          maxLength: 50
          pattern: "^[0-9A-Za-z- ]*$"
          description: Pollution certificate number
          example: "PUCC-2024-001234"
        issueDate:
          type: string
          format: date
          description: Certificate issue date
          example: "2024-01-10"
        expiryDate:
          type: string
          format: date
          description: Certificate expiry date
          example: "2024-07-10"
        testingCenter:
          type: string
          minLength: 3
          maxLength: 50
          description: Name of the testing center
          example: "Green Check Emissions"
        notes:
          type: string
          maxLength: 500
          description: Optional notes about the certificate
          example: "Passed all emission tests"
        createdAt:
          type: string
          format: date-time
          description: Certificate record creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Certificate record last update timestamp

    PollutionCertificateInput:
      type: object
      required:
        - certificateNumber
        - issueDate
        - expiryDate
        - testingCenter
      properties:
        certificateNumber:
          type: string
          minLength: 3
          maxLength: 50
          pattern: "^[0-9A-Za-z- ]*$"
          description: Pollution certificate number
          example: "PUCC-2024-001234"
        issueDate:
          type: string
          format: date
          description: Certificate issue date
          example: "2024-01-10"
        expiryDate:
          type: string
          format: date
          description: Certificate expiry date
          example: "2024-07-10"
        testingCenter:
          type: string
          minLength: 3
          maxLength: 50
          description: Name of the testing center
          example: "Green Check Emissions"
        notes:
          type: string
          maxLength: 500
          description: Optional notes about the certificate
          example: "Passed all emission tests"

    # PIN Authentication Schemas
    PinInput:
      type: object
      required:
        - pin
      properties:
        pin:
          type: string
          pattern: "^\\d{6}$"
          description: 6-digit PIN for authentication
          example: "123456"

    PinStatusResponse:
      type: object
      required:
        - isSet
      properties:
        isSet:
          type: boolean
          description: Whether a PIN has been set
          example: true
        message:
          type: string
          description: Status message
          example: "PIN is already set"

paths:
  # PIN Management Endpoints
  /pin:
    post:
      tags:
        - Authentication
      summary: Set PIN
      description: Set a 6-digit PIN for authentication. This endpoint does not require authentication.
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PinInput"
      responses:
        "200":
          description: PIN set successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
              example:
                message: "PIN set successfully"
        "400":
          description: Invalid PIN format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                message: "PIN must be a 6-digit number."

  /pin/verify:
    post:
      tags:
        - Authentication
      summary: Verify PIN
      description: Verify the provided PIN. Rate limited to 5 attempts per 5 minutes.
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PinInput"
      responses:
        "200":
          description: PIN verified successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
              example:
                message: "PIN verified successfully"
        "400":
          description: PIN is required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                message: "PIN is required."
        "401":
          description: Invalid PIN
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                message: "Invalid PIN."
        "429":
          description: Too many attempts
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                message: "Too many PIN verification attempts, please try again later."

  /pin/status:
    get:
      tags:
        - Authentication
      summary: Get PIN status
      description: Check if a PIN has been set. This endpoint does not require authentication.
      security: []
      responses:
        "200":
          description: PIN status retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PinStatusResponse"

  # Vehicle Management Endpoints
  /vehicles:
    post:
      tags:
        - Vehicles
      summary: Add a new vehicle
      description: Create a new vehicle record
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VehicleInput"
      responses:
        "201":
          description: Vehicle created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Vehicle"
        "400":
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorResponse"
              example:
                message: "Make, Model, Year, and License Plate are required."
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                message: "PIN is required in X-User-PIN header."

    get:
      tags:
        - Vehicles
      summary: Get all vehicles
      description: Retrieve a list of all vehicles
      responses:
        "200":
          description: List of vehicles retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Vehicle"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /vehicles/{id}:
    get:
      tags:
        - Vehicles
      summary: Get vehicle by ID
      description: Retrieve a specific vehicle by its ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Vehicle ID
      responses:
        "200":
          description: Vehicle retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Vehicle"
        "400":
          description: Vehicle ID is required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                message: "Vehicle ID is required."
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Vehicle not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    put:
      tags:
        - Vehicles
      summary: Update vehicle
      description: Update an existing vehicle's information
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Vehicle ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VehicleInput"
      responses:
        "200":
          description: Vehicle updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Vehicle"
        "400":
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorResponse"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Vehicle not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags:
        - Vehicles
      summary: Delete vehicle
      description: Delete a vehicle and all associated records
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Vehicle ID
      responses:
        "200":
          description: Vehicle deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400":
          description: Vehicle ID is required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Vehicle not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # Fuel Log Endpoints
  /vehicles/{vehicleId}/fuel-logs:
    post:
      tags:
        - Fuel Logs
      summary: Add fuel log entry
      description: Create a new fuel log entry for a specific vehicle
      parameters:
        - name: vehicleId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Vehicle ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FuelLogInput"
      responses:
        "201":
          description: Fuel log created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FuelLog"
        "400":
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorResponse"
              example:
                message: "Date, Odometer, Fuel Amount, and Cost are required in request body."
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    get:
      tags:
        - Fuel Logs
      summary: Get fuel logs for vehicle
      description: Retrieve all fuel log entries for a specific vehicle
      parameters:
        - name: vehicleId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Vehicle ID
      responses:
        "200":
          description: Fuel logs retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FuelLog"
        "400":
          description: Vehicle ID is required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /vehicles/{vehicleId}/fuel-logs/{id}:
    get:
      tags:
        - Fuel Logs
      summary: Get fuel log by ID
      description: Retrieve a specific fuel log entry
      parameters:
        - name: vehicleId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Vehicle ID
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Fuel log ID
      responses:
        "200":
          description: Fuel log retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FuelLog"
        "400":
          description: Fuel Log ID is required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Fuel log not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    put:
      tags:
        - Fuel Logs
      summary: Update fuel log
      description: Update an existing fuel log entry
      parameters:
        - name: vehicleId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Vehicle ID
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Fuel log ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FuelLogInput"
      responses:
        "200":
          description: Fuel log updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FuelLog"
        "400":
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorResponse"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Fuel log not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags:
        - Fuel Logs
      summary: Delete fuel log
      description: Delete a fuel log entry
      parameters:
        - name: vehicleId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Vehicle ID
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Fuel log ID
      responses:
        "200":
          description: Fuel log deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400":
          description: Fuel Log ID is required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Fuel log not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  # Maintenance Log Endpoints
  /vehicles/{vehicleId}/maintenance-logs:
    post:
      tags:
        - Maintenance Logs
      summary: Add maintenance log entry
      description: Create a new maintenance log entry for a specific vehicle
      parameters:
        - name: vehicleId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Vehicle ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MaintenanceLogInput"
      responses:
        "201":
          description: Maintenance log created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MaintenanceLog"
        "400":
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorResponse"
              example:
                message: "Date, Odometer, ServiceCenter, and Cost are required."
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    get:
      tags:
        - Maintenance Logs
      summary: Get maintenance logs for vehicle
      description: Retrieve all maintenance log entries for a specific vehicle
      parameters:
        - name: vehicleId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Vehicle ID
      responses:
        "200":
          description: Maintenance logs retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MaintenanceLog"
        "400":
          description: Vehicle ID is required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /vehicles/{vehicleId}/maintenance-logs/{id}:
    get:
      tags:
        - Maintenance Logs
      summary: Get maintenance log by ID
      description: Retrieve a specific maintenance log entry
      parameters:
        - name: vehicleId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Vehicle ID
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Maintenance log ID
      responses:
        "200":
          description: Maintenance log retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MaintenanceLog"
        "400":
          description: Maintenance Log ID is required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Maintenance log not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    put:
      tags:
        - Maintenance Logs
      summary: Update maintenance log
      description: Update an existing maintenance log entry
      parameters:
        - name: vehicleId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Vehicle ID
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Maintenance log ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MaintenanceLogInput"
      responses:
        "200":
          description: Maintenance log updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MaintenanceLog"
        "400":
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorResponse"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Maintenance log not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags:
        - Maintenance Logs
      summary: Delete maintenance log
      description: Delete a maintenance log entry
      parameters:
        - name: vehicleId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Vehicle ID
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Maintenance log ID
      responses:
        "200":
          description: Maintenance log deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400":
          description: Maintenance Log ID is required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Maintenance log not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # Insurance Endpoints
  /vehicles/{vehicleId}/insurance:
    post:
      tags:
        - Insurance
      summary: Add insurance record
      description: Create a new insurance record for a specific vehicle
      parameters:
        - name: vehicleId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Vehicle ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InsuranceInput"
      responses:
        "201":
          description: Insurance record created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Insurance"
        "400":
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorResponse"
              example:
                message: "Provider, Policy Number, Start Date, End Date, and Cost are required."
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    get:
      tags:
        - Insurance
      summary: Get insurance records for vehicle
      description: Retrieve all insurance records for a specific vehicle
      parameters:
        - name: vehicleId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Vehicle ID
      responses:
        "200":
          description: Insurance records retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Insurance"
        "400":
          description: Vehicle ID is required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /vehicles/{vehicleId}/insurance/{id}:
    put:
      tags:
        - Insurance
      summary: Update insurance record
      description: Update an existing insurance record
      parameters:
        - name: vehicleId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Vehicle ID
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Insurance record ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InsuranceInput"
      responses:
        "200":
          description: Insurance record updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Insurance"
        "400":
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorResponse"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Insurance record not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags:
        - Insurance
      summary: Delete insurance record
      description: Delete an insurance record
      parameters:
        - name: vehicleId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Vehicle ID
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Insurance record ID
      responses:
        "200":
          description: Insurance record deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400":
          description: Insurance ID is required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Insurance record not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # Pollution Certificate (PUCC) Endpoints
  /vehicles/{vehicleId}/pucc:
    post:
      tags:
        - Pollution Certificates
      summary: Add pollution certificate
      description: Create a new pollution certificate record for a specific vehicle
      parameters:
        - name: vehicleId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Vehicle ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PollutionCertificateInput"
      responses:
        "201":
          description: Pollution certificate created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PollutionCertificate"
        "400":
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorResponse"
              example:
                message: "Certificate Number, Issue Date, Expiry Date, and Testing Center are required."
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    get:
      tags:
        - Pollution Certificates
      summary: Get pollution certificates for vehicle
      description: Retrieve all pollution certificate records for a specific vehicle
      parameters:
        - name: vehicleId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Vehicle ID
      responses:
        "200":
          description: Pollution certificates retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PollutionCertificate"
        "400":
          description: Vehicle ID is required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags:
        - Pollution Certificates
      summary: Delete pollution certificate
      description: Delete a pollution certificate record
      parameters:
        - name: vehicleId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Vehicle ID
      responses:
        "200":
          description: Pollution certificate deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400":
          description: Vehicle ID is required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Pollution certificate not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /vehicles/{vehicleId}/pucc/{id}:
    put:
      tags:
        - Pollution Certificates
      summary: Update pollution certificate
      description: Update an existing pollution certificate record
      parameters:
        - name: vehicleId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Vehicle ID
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Pollution certificate ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PollutionCertificateInput"
      responses:
        "200":
          description: Pollution certificate updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PollutionCertificate"
        "400":
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorResponse"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Pollution certificate not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags:
        - Pollution Certificates
      summary: Delete pollution certificate by ID
      description: Delete a specific pollution certificate record by ID
      parameters:
        - name: vehicleId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Vehicle ID
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Pollution certificate ID
      responses:
        "200":
          description: Pollution certificate deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400":
          description: Vehicle ID or certificate ID is required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Pollution certificate not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # Configuration Management Endpoints
  /config:
    get:
      tags:
        - Configuration
      summary: Get all configuration settings
      description: Retrieve all application configuration settings
      responses:
        "200":
          description: Configuration settings retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    key:
                      type: string
                      description: Configuration key
                      example: "app.theme"
                    value:
                      type: string
                      description: Configuration value
                      example: "dark"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    put:
      tags:
        - Configuration
      summary: Update configuration settings
      description: Update multiple configuration settings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                required:
                  - key
                  - value
                properties:
                  key:
                    type: string
                    description: Configuration key
                    example: "app.theme"
                  value:
                    type: string
                    description: Configuration value
                    example: "dark"
      responses:
        "200":
          description: Configuration updated successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    key:
                      type: string
                      description: Configuration key
                    value:
                      type: string
                      description: Configuration value
        "400":
          description: Invalid configuration data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /config/{key}:
    get:
      tags:
        - Configuration
      summary: Get configuration by key
      description: Retrieve a specific configuration setting by key
      parameters:
        - name: key
          in: path
          required: true
          schema:
            type: string
          description: Configuration key
          example: "app.theme"
      responses:
        "200":
          description: Configuration setting retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  key:
                    type: string
                    description: Configuration key
                    example: "app.theme"
                  value:
                    type: string
                    description: Configuration value
                    example: "dark"
        "400":
          description: Key parameter is required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Configuration key not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

tags:
  - name: Authentication
    description: PIN-based authentication endpoints
  - name: Vehicles
    description: Vehicle management operations
  - name: Fuel Logs
    description: Fuel consumption tracking operations
  - name: Maintenance Logs
    description: Vehicle maintenance record operations
  - name: Insurance
    description: Vehicle insurance record operations
  - name: Pollution Certificates
    description: Pollution certificate (PUCC) record operations
  - name: Configuration
    description: Application configuration management operations
